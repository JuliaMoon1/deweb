// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: deweb/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetKeyRecordRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *QueryGetKeyRecordRequest) Reset()         { *m = QueryGetKeyRecordRequest{} }
func (m *QueryGetKeyRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetKeyRecordRequest) ProtoMessage()    {}
func (*QueryGetKeyRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa3f738e95cca609, []int{0}
}
func (m *QueryGetKeyRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKeyRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKeyRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKeyRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKeyRecordRequest.Merge(m, src)
}
func (m *QueryGetKeyRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKeyRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKeyRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKeyRecordRequest proto.InternalMessageInfo

func (m *QueryGetKeyRecordRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type QueryGetKeyRecordResponse struct {
	Uuid    string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Chain   string `protobuf:"bytes,3,opt,name=chain,proto3" json:"chain,omitempty"`
	Deleted bool   `protobuf:"varint,4,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (m *QueryGetKeyRecordResponse) Reset()         { *m = QueryGetKeyRecordResponse{} }
func (m *QueryGetKeyRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetKeyRecordResponse) ProtoMessage()    {}
func (*QueryGetKeyRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa3f738e95cca609, []int{1}
}
func (m *QueryGetKeyRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKeyRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKeyRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKeyRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKeyRecordResponse.Merge(m, src)
}
func (m *QueryGetKeyRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKeyRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKeyRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKeyRecordResponse proto.InternalMessageInfo

func (m *QueryGetKeyRecordResponse) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *QueryGetKeyRecordResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryGetKeyRecordResponse) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *QueryGetKeyRecordResponse) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type QueryGetUserKeyRecordsRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetUserKeyRecordsRequest) Reset()         { *m = QueryGetUserKeyRecordsRequest{} }
func (m *QueryGetUserKeyRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserKeyRecordsRequest) ProtoMessage()    {}
func (*QueryGetUserKeyRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa3f738e95cca609, []int{2}
}
func (m *QueryGetUserKeyRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserKeyRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserKeyRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserKeyRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserKeyRecordsRequest.Merge(m, src)
}
func (m *QueryGetUserKeyRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserKeyRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserKeyRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserKeyRecordsRequest proto.InternalMessageInfo

func (m *QueryGetUserKeyRecordsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetUserKeyRecordsResponse struct {
	Uuids []string `protobuf:"bytes,1,rep,name=uuids,proto3" json:"uuids,omitempty"`
}

func (m *QueryGetUserKeyRecordsResponse) Reset()         { *m = QueryGetUserKeyRecordsResponse{} }
func (m *QueryGetUserKeyRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserKeyRecordsResponse) ProtoMessage()    {}
func (*QueryGetUserKeyRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa3f738e95cca609, []int{3}
}
func (m *QueryGetUserKeyRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserKeyRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserKeyRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserKeyRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserKeyRecordsResponse.Merge(m, src)
}
func (m *QueryGetUserKeyRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserKeyRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserKeyRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserKeyRecordsResponse proto.InternalMessageInfo

func (m *QueryGetUserKeyRecordsResponse) GetUuids() []string {
	if m != nil {
		return m.Uuids
	}
	return nil
}

type QueryFilterUserKeyRecordsRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Chain   string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Deleted bool   `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (m *QueryFilterUserKeyRecordsRequest) Reset()         { *m = QueryFilterUserKeyRecordsRequest{} }
func (m *QueryFilterUserKeyRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFilterUserKeyRecordsRequest) ProtoMessage()    {}
func (*QueryFilterUserKeyRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa3f738e95cca609, []int{4}
}
func (m *QueryFilterUserKeyRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFilterUserKeyRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFilterUserKeyRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFilterUserKeyRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFilterUserKeyRecordsRequest.Merge(m, src)
}
func (m *QueryFilterUserKeyRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFilterUserKeyRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFilterUserKeyRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFilterUserKeyRecordsRequest proto.InternalMessageInfo

func (m *QueryFilterUserKeyRecordsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryFilterUserKeyRecordsRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *QueryFilterUserKeyRecordsRequest) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type QueryFilterUserKeyRecordsResponse struct {
	Records []*QueryGetKeyRecordResponse `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (m *QueryFilterUserKeyRecordsResponse) Reset()         { *m = QueryFilterUserKeyRecordsResponse{} }
func (m *QueryFilterUserKeyRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFilterUserKeyRecordsResponse) ProtoMessage()    {}
func (*QueryFilterUserKeyRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa3f738e95cca609, []int{5}
}
func (m *QueryFilterUserKeyRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFilterUserKeyRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFilterUserKeyRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFilterUserKeyRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFilterUserKeyRecordsResponse.Merge(m, src)
}
func (m *QueryFilterUserKeyRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFilterUserKeyRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFilterUserKeyRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFilterUserKeyRecordsResponse proto.InternalMessageInfo

func (m *QueryFilterUserKeyRecordsResponse) GetRecords() []*QueryGetKeyRecordResponse {
	if m != nil {
		return m.Records
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetKeyRecordRequest)(nil), "dewebservices.deweb.deweb.QueryGetKeyRecordRequest")
	proto.RegisterType((*QueryGetKeyRecordResponse)(nil), "dewebservices.deweb.deweb.QueryGetKeyRecordResponse")
	proto.RegisterType((*QueryGetUserKeyRecordsRequest)(nil), "dewebservices.deweb.deweb.QueryGetUserKeyRecordsRequest")
	proto.RegisterType((*QueryGetUserKeyRecordsResponse)(nil), "dewebservices.deweb.deweb.QueryGetUserKeyRecordsResponse")
	proto.RegisterType((*QueryFilterUserKeyRecordsRequest)(nil), "dewebservices.deweb.deweb.QueryFilterUserKeyRecordsRequest")
	proto.RegisterType((*QueryFilterUserKeyRecordsResponse)(nil), "dewebservices.deweb.deweb.QueryFilterUserKeyRecordsResponse")
}

func init() { proto.RegisterFile("deweb/query.proto", fileDescriptor_fa3f738e95cca609) }

var fileDescriptor_fa3f738e95cca609 = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0xe6, 0x83, 0xc0, 0xc0, 0xa5, 0xab, 0x1c, 0x5c, 0x0b, 0xac, 0xe0, 0x53, 0x85, 0x54,
	0x5b, 0x4d, 0x2b, 0x20, 0xa5, 0x12, 0x52, 0x0f, 0xf4, 0x80, 0x84, 0x84, 0x25, 0x2e, 0xdc, 0xd6,
	0xf6, 0xe0, 0x5a, 0x4a, 0xbc, 0xae, 0x67, 0x5d, 0xc8, 0x95, 0x5f, 0x80, 0xc4, 0x6f, 0xe1, 0x3f,
	0xc0, 0xad, 0x12, 0x42, 0xe2, 0x88, 0x12, 0x7e, 0x08, 0xf2, 0xda, 0x86, 0x00, 0x4e, 0x9b, 0xe6,
	0x92, 0xec, 0x1b, 0xbd, 0x37, 0xf3, 0xde, 0xce, 0xca, 0xb0, 0x15, 0xe2, 0x5b, 0xf4, 0xdd, 0xb3,
	0x1c, 0xb3, 0x99, 0x93, 0x66, 0x52, 0x49, 0xbe, 0xad, 0x4b, 0x84, 0xd9, 0x79, 0x1c, 0x20, 0x39,
	0x1a, 0x95, 0xbf, 0xe6, 0xdd, 0x48, 0xca, 0x68, 0x82, 0xae, 0x48, 0x63, 0x57, 0x24, 0x89, 0x54,
	0x42, 0xc5, 0x32, 0xa1, 0x52, 0x68, 0x3e, 0x08, 0x24, 0x4d, 0x25, 0xb9, 0xbe, 0x20, 0x2c, 0x3b,
	0xba, 0xe7, 0x7b, 0x3e, 0x2a, 0xb1, 0xe7, 0xa6, 0x22, 0x8a, 0x13, 0x4d, 0x2e, 0xb9, 0xb6, 0x03,
	0xc6, 0xcb, 0x82, 0x71, 0x82, 0xea, 0x39, 0xce, 0x3c, 0x0c, 0x64, 0x16, 0x7a, 0x78, 0x96, 0x23,
	0x29, 0xce, 0xa1, 0x9b, 0xe7, 0x71, 0x68, 0xb0, 0x21, 0xdb, 0xb9, 0xe5, 0xe9, 0xb3, 0x3d, 0x83,
	0xed, 0x06, 0x3e, 0xa5, 0x32, 0x21, 0x6c, 0x12, 0x70, 0x03, 0xfa, 0x53, 0x24, 0x12, 0x11, 0x1a,
	0x6d, 0x5d, 0xae, 0x21, 0x1f, 0x40, 0x2f, 0x38, 0x15, 0x71, 0x62, 0x74, 0x74, 0xbd, 0x04, 0x05,
	0x3f, 0xc4, 0x09, 0x2a, 0x0c, 0x8d, 0xee, 0x90, 0xed, 0xdc, 0xf4, 0x6a, 0x68, 0x8f, 0xe1, 0x5e,
	0x3d, 0xfa, 0x15, 0x61, 0xf6, 0x7b, 0x3c, 0xd5, 0x7e, 0x0d, 0xe8, 0x8b, 0x30, 0xcc, 0x90, 0xa8,
	0x72, 0x50, 0x43, 0xfb, 0x21, 0x58, 0xab, 0xa4, 0x95, 0xf5, 0x01, 0xf4, 0x0a, 0xbb, 0x85, 0xb2,
	0x53, 0x98, 0xd1, 0xc0, 0x9e, 0xc0, 0x50, 0xeb, 0x9e, 0xc5, 0x13, 0x85, 0xd9, 0x35, 0xa7, 0xfe,
	0x09, 0xd8, 0x5e, 0x11, 0xb0, 0xf3, 0x77, 0x40, 0x82, 0xfb, 0x97, 0x4c, 0xab, 0x8c, 0xbe, 0x80,
	0x7e, 0x56, 0x96, 0xb4, 0xd5, 0xdb, 0xa3, 0x03, 0x67, 0xe5, 0x3b, 0x71, 0x56, 0xae, 0xca, 0xab,
	0x9b, 0x8c, 0x16, 0x5d, 0xe8, 0x69, 0x1a, 0xff, 0xc4, 0xe0, 0xce, 0x32, 0x97, 0xef, 0x5f, 0xaf,
	0xb3, 0xbe, 0x0e, 0x73, 0x23, 0x3b, 0xf6, 0xe1, 0xfb, 0xaf, 0x3f, 0x3f, 0xb6, 0x0f, 0xf8, 0xc8,
	0xd5, 0xcc, 0xdd, 0x5a, 0x5e, 0x42, 0x7d, 0x71, 0xcb, 0xc7, 0x68, 0xd9, 0xe6, 0x17, 0x06, 0x5b,
	0xff, 0x2d, 0x96, 0x3f, 0x5e, 0xc3, 0x47, 0xe3, 0x42, 0xcd, 0xf1, 0x06, 0xca, 0x2a, 0xc6, 0x53,
	0x1d, 0x63, 0xcc, 0x1f, 0xad, 0x1d, 0xe3, 0x1f, 0xd7, 0xdf, 0x18, 0x0c, 0x9a, 0xd6, 0xcf, 0x9f,
	0x5c, 0x65, 0xea, 0x92, 0x27, 0x6a, 0x1e, 0x6d, 0x26, 0xae, 0x42, 0x1d, 0xeb, 0x50, 0x47, 0xfc,
	0x70, 0xbd, 0x50, 0x6f, 0x1a, 0x7a, 0x1d, 0x9f, 0x7c, 0x9e, 0x5b, 0xec, 0x62, 0x6e, 0xb1, 0x1f,
	0x73, 0x8b, 0x7d, 0x58, 0x58, 0xad, 0x8b, 0x85, 0xd5, 0xfa, 0xbe, 0xb0, 0x5a, 0xaf, 0x77, 0xa3,
	0x58, 0x9d, 0xe6, 0xbe, 0x13, 0xc8, 0x69, 0x63, 0x7f, 0xf7, 0x5d, 0xf5, 0xaf, 0x66, 0x29, 0x92,
	0x7f, 0x43, 0x7f, 0xb6, 0xf6, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xf2, 0xfe, 0x3e, 0x12, 0x30,
	0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a list of getKeyRecord items.
	GetKeyRecord(ctx context.Context, in *QueryGetKeyRecordRequest, opts ...grpc.CallOption) (*QueryGetKeyRecordResponse, error)
	// Queries a list of getUserKeyRecords items.
	GetUserKeyRecords(ctx context.Context, in *QueryGetUserKeyRecordsRequest, opts ...grpc.CallOption) (*QueryGetUserKeyRecordsResponse, error)
	// Queries a list of filterUserKeyRecords items.
	FilterUserKeyRecords(ctx context.Context, in *QueryFilterUserKeyRecordsRequest, opts ...grpc.CallOption) (*QueryFilterUserKeyRecordsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetKeyRecord(ctx context.Context, in *QueryGetKeyRecordRequest, opts ...grpc.CallOption) (*QueryGetKeyRecordResponse, error) {
	out := new(QueryGetKeyRecordResponse)
	err := c.cc.Invoke(ctx, "/dewebservices.deweb.deweb.Query/GetKeyRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUserKeyRecords(ctx context.Context, in *QueryGetUserKeyRecordsRequest, opts ...grpc.CallOption) (*QueryGetUserKeyRecordsResponse, error) {
	out := new(QueryGetUserKeyRecordsResponse)
	err := c.cc.Invoke(ctx, "/dewebservices.deweb.deweb.Query/GetUserKeyRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FilterUserKeyRecords(ctx context.Context, in *QueryFilterUserKeyRecordsRequest, opts ...grpc.CallOption) (*QueryFilterUserKeyRecordsResponse, error) {
	out := new(QueryFilterUserKeyRecordsResponse)
	err := c.cc.Invoke(ctx, "/dewebservices.deweb.deweb.Query/FilterUserKeyRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a list of getKeyRecord items.
	GetKeyRecord(context.Context, *QueryGetKeyRecordRequest) (*QueryGetKeyRecordResponse, error)
	// Queries a list of getUserKeyRecords items.
	GetUserKeyRecords(context.Context, *QueryGetUserKeyRecordsRequest) (*QueryGetUserKeyRecordsResponse, error)
	// Queries a list of filterUserKeyRecords items.
	FilterUserKeyRecords(context.Context, *QueryFilterUserKeyRecordsRequest) (*QueryFilterUserKeyRecordsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetKeyRecord(ctx context.Context, req *QueryGetKeyRecordRequest) (*QueryGetKeyRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyRecord not implemented")
}
func (*UnimplementedQueryServer) GetUserKeyRecords(ctx context.Context, req *QueryGetUserKeyRecordsRequest) (*QueryGetUserKeyRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserKeyRecords not implemented")
}
func (*UnimplementedQueryServer) FilterUserKeyRecords(ctx context.Context, req *QueryFilterUserKeyRecordsRequest) (*QueryFilterUserKeyRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterUserKeyRecords not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetKeyRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetKeyRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetKeyRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dewebservices.deweb.deweb.Query/GetKeyRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetKeyRecord(ctx, req.(*QueryGetKeyRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUserKeyRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUserKeyRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUserKeyRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dewebservices.deweb.deweb.Query/GetUserKeyRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUserKeyRecords(ctx, req.(*QueryGetUserKeyRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FilterUserKeyRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFilterUserKeyRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FilterUserKeyRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dewebservices.deweb.deweb.Query/FilterUserKeyRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FilterUserKeyRecords(ctx, req.(*QueryFilterUserKeyRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dewebservices.deweb.deweb.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKeyRecord",
			Handler:    _Query_GetKeyRecord_Handler,
		},
		{
			MethodName: "GetUserKeyRecords",
			Handler:    _Query_GetUserKeyRecords_Handler,
		},
		{
			MethodName: "FilterUserKeyRecords",
			Handler:    _Query_FilterUserKeyRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deweb/query.proto",
}

func (m *QueryGetKeyRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKeyRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKeyRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKeyRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKeyRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKeyRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deleted {
		i--
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUserKeyRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserKeyRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserKeyRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUserKeyRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserKeyRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserKeyRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uuids) > 0 {
		for iNdEx := len(m.Uuids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Uuids[iNdEx])
			copy(dAtA[i:], m.Uuids[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Uuids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFilterUserKeyRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFilterUserKeyRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFilterUserKeyRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deleted {
		i--
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFilterUserKeyRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFilterUserKeyRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFilterUserKeyRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetKeyRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetKeyRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Deleted {
		n += 2
	}
	return n
}

func (m *QueryGetUserKeyRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUserKeyRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Uuids) > 0 {
		for _, s := range m.Uuids {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFilterUserKeyRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Deleted {
		n += 2
	}
	return n
}

func (m *QueryFilterUserKeyRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetKeyRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKeyRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKeyRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKeyRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKeyRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKeyRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserKeyRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserKeyRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserKeyRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserKeyRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserKeyRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserKeyRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuids = append(m.Uuids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFilterUserKeyRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFilterUserKeyRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFilterUserKeyRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFilterUserKeyRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFilterUserKeyRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFilterUserKeyRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &QueryGetKeyRecordResponse{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
