// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: deweb/keyrec.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserKeyRec struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Chain   string `protobuf:"bytes,3,opt,name=chain,proto3" json:"chain,omitempty"`
	Deleted bool   `protobuf:"varint,4,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (m *UserKeyRec) Reset()         { *m = UserKeyRec{} }
func (m *UserKeyRec) String() string { return proto.CompactTextString(m) }
func (*UserKeyRec) ProtoMessage()    {}
func (*UserKeyRec) Descriptor() ([]byte, []int) {
	return fileDescriptor_252f1f94115ff5dd, []int{0}
}
func (m *UserKeyRec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserKeyRec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserKeyRec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserKeyRec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserKeyRec.Merge(m, src)
}
func (m *UserKeyRec) XXX_Size() int {
	return m.Size()
}
func (m *UserKeyRec) XXX_DiscardUnknown() {
	xxx_messageInfo_UserKeyRec.DiscardUnknown(m)
}

var xxx_messageInfo_UserKeyRec proto.InternalMessageInfo

func (m *UserKeyRec) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *UserKeyRec) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UserKeyRec) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *UserKeyRec) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type RecordsToUser struct {
	Records []string `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (m *RecordsToUser) Reset()         { *m = RecordsToUser{} }
func (m *RecordsToUser) String() string { return proto.CompactTextString(m) }
func (*RecordsToUser) ProtoMessage()    {}
func (*RecordsToUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_252f1f94115ff5dd, []int{1}
}
func (m *RecordsToUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordsToUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordsToUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordsToUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordsToUser.Merge(m, src)
}
func (m *RecordsToUser) XXX_Size() int {
	return m.Size()
}
func (m *RecordsToUser) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordsToUser.DiscardUnknown(m)
}

var xxx_messageInfo_RecordsToUser proto.InternalMessageInfo

func (m *RecordsToUser) GetRecords() []string {
	if m != nil {
		return m.Records
	}
	return nil
}

func init() {
	proto.RegisterType((*UserKeyRec)(nil), "dewebservices.deweb.deweb.UserKeyRec")
	proto.RegisterType((*RecordsToUser)(nil), "dewebservices.deweb.deweb.RecordsToUser")
}

func init() { proto.RegisterFile("deweb/keyrec.proto", fileDescriptor_252f1f94115ff5dd) }

var fileDescriptor_252f1f94115ff5dd = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x90, 0x3d, 0x4e, 0xc4, 0x30,
	0x14, 0x84, 0x63, 0x96, 0x5f, 0x4b, 0x34, 0x11, 0x85, 0x69, 0xac, 0x68, 0xab, 0xa5, 0xd8, 0xa4,
	0xe0, 0x06, 0x34, 0x14, 0x74, 0x16, 0x34, 0x74, 0x89, 0x3d, 0xda, 0x8d, 0x60, 0x71, 0xf4, 0x6c,
	0x7e, 0x72, 0x0b, 0x8e, 0x45, 0x99, 0x92, 0x12, 0x25, 0x17, 0x41, 0xb6, 0x93, 0xc6, 0xd6, 0x37,
	0x33, 0x7a, 0x4f, 0xf3, 0x78, 0x6e, 0xf0, 0x89, 0xa6, 0x7a, 0x41, 0x4f, 0xd0, 0x65, 0x47, 0xd6,
	0xdb, 0xfc, 0x3a, 0x6a, 0x0e, 0xf4, 0xd1, 0x6a, 0xb8, 0x32, 0x52, 0x7a, 0xd7, 0x1d, 0xe7, 0x4f,
	0x0e, 0xf4, 0x80, 0x5e, 0x41, 0xe7, 0x82, 0x9f, 0x69, 0x42, 0xed, 0x2d, 0x09, 0x56, 0xb0, 0xcd,
	0x85, 0x5a, 0x30, 0x38, 0x07, 0x38, 0x57, 0xef, 0x20, 0x8e, 0x92, 0x33, 0x63, 0x7e, 0xc5, 0x4f,
	0xf4, 0xbe, 0x6e, 0xdf, 0xc4, 0x2a, 0xea, 0x09, 0x42, 0xde, 0xe0, 0x15, 0x1e, 0x46, 0x1c, 0x17,
	0x6c, 0x73, 0xae, 0x16, 0x5c, 0xdf, 0xf0, 0x4b, 0x05, 0x6d, 0xc9, 0xb8, 0x47, 0x1b, 0x56, 0x87,
	0x28, 0x25, 0x41, 0xb0, 0x62, 0x15, 0x46, 0xcf, 0x78, 0x77, 0xff, 0x33, 0x4a, 0x36, 0x8c, 0x92,
	0xfd, 0x8d, 0x92, 0x7d, 0x4f, 0x32, 0x1b, 0x26, 0x99, 0xfd, 0x4e, 0x32, 0x7b, 0xde, 0xee, 0x5a,
	0xbf, 0x7f, 0x6f, 0x4a, 0x6d, 0x0f, 0x55, 0x2c, 0xb2, 0x5d, 0xda, 0x25, 0xac, 0xbe, 0xe6, 0xdf,
	0xf7, 0x1d, 0x5c, 0x73, 0x1a, 0xef, 0x70, 0xfb, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x32, 0xbc, 0xfe,
	0x1f, 0x1d, 0x01, 0x00, 0x00,
}

func (m *UserKeyRec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserKeyRec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserKeyRec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deleted {
		i--
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintKeyrec(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintKeyrec(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintKeyrec(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordsToUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordsToUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordsToUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Records[iNdEx])
			copy(dAtA[i:], m.Records[iNdEx])
			i = encodeVarintKeyrec(dAtA, i, uint64(len(m.Records[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintKeyrec(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeyrec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserKeyRec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovKeyrec(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovKeyrec(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovKeyrec(uint64(l))
	}
	if m.Deleted {
		n += 2
	}
	return n
}

func (m *RecordsToUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, s := range m.Records {
			l = len(s)
			n += 1 + l + sovKeyrec(uint64(l))
		}
	}
	return n
}

func sovKeyrec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeyrec(x uint64) (n int) {
	return sovKeyrec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserKeyRec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyrec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserKeyRec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserKeyRec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyrec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyrec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyrec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyrec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyrec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyrec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyrec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyrec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyrec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyrec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipKeyrec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyrec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordsToUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyrec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordsToUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordsToUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyrec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyrec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyrec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyrec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyrec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeyrec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeyrec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeyrec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeyrec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeyrec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKeyrec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKeyrec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKeyrec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeyrec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKeyrec = fmt.Errorf("proto: unexpected end of group")
)
